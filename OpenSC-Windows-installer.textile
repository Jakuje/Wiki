h1. OpenSC Windows installer

The purpose of the OpenSC installer is to distribute pre-built binary components of OpenSC and sub-projects to the end-user computer, manage simple configuration entries (like required registry keys) and removal of the components.

!attachments/wiki/WindowsInstaller/OpenSC_Windows_installer_screenshot.png(WindowsInstaller)!

The contents of the package is:
 * OpenSC core (and dependencies):
   * OpenSSL
   * zlib

h2. Possible installer steps / Windows environment description

 * The default installation location is _C:\Program Files\Opensc Project\OpenSC_ or equivalent.
  * Only *.exe, *.profile and opensc.conf files are installed to the installation directory. To make applications like Firefox find the .dll dependancies, *.dll are installed to _C:\Windows\system32_ or equivalent.
 * Registry keys that OpenSC can use:
  * OpenSC: common key _"Software\\OpenSC Project\\OpenSC"_ (names are case-preserved, but not case-sensitive)
   * _ConfigFile_ - path to OpenSC config, searched from HKCU and HKLM, HKLM set to C:\Program Files\OpenSC Project\opensc.conf on install
   * _ProfileDir_ - path to OpenSC PKCS#15 initialization profiles, searched from HKCU and HKLM, HKLM set to _C:\Program Files\OpenSC Project\OpenSC\profiles_ on install
  * pkcs11-spy: common key _"Software\\OpenSC Project\\PKCS11-Spy"_
   * _Module_ - path to the real PKCS#11 module to load, searched from HKLM, HKCU
   * _Output_ - path to the log output file, searched from HKLM, HKCU 

h3. Open questions

 * TODO-s on this page.
 * What kind of documentation should be provided with the installer package?
 * How to harmonize the versioning of OpenSC and sub-projects.
 * Deal with locked files on installation (reboot-after-install) and uninstall (remove-after-reboot)

h2. Download

 * See the WikiStart page for release downloads.
 * PreReleases and "NightlyBuilds":wiki/Automated-OpenSC-builds are usually available as well.

h2. Build instructions (Windows)

 * Windows x86 or x64 (tested with Windows XP SP3 x86 and Windows 7 SP1 x64). <b>NB! </b> All packages should be installed with default settings to default locations for the packaged scripts to work!
 * Windows "Platform SDK":http://www.microsoft.com/downloads/en/details.aspx?FamilyID=35aeda01-421d-4ba5-b44b-543dc8c33a20 (contains Visual Studio 2008 compiler)
  * TODO: Windows 8 will remove this option: "http://www.engadget.com/2012/05/24/microsoft-pulling-free-development-tools-for-windows-8-desktop-apps/":http://www.engadget.com/2012/05/24/microsoft-pulling-free-development-tools-for-windows-8-desktop-apps/
 * Installed "CNG SDK":http://www.microsoft.com/downloads/en/details.aspx?FamilyID=1ef399e9-b018-49db-a98b-0ced7cb8ff6f
 * For building the MSI installer: "WiX toolset 3.6.x":http://wix.sourceforge.net/releases/ (3.6.1629.0 used, installing the Wix36.exe from snapshot directory works)
 * (optional) For building .exe installer: "Inno Setup":http://www.jrsoftware.org/download.php/is.exe
 * OpenSSL, either built from source or a pre-built binary from "Shining Light Productions":http://www.slproweb.com/products/Win32OpenSSL.html. Build scripts are tuned to the pre-built package.
 * "zlib":http://zlib.net/
  * Unpack to c:\zlib-1.2.5 and compile from Platform SDK command prompt
   * x86: _SetEnv.cmd /x86 /Release_ and _nmake /f win32\Makefile.msc LOC="-DASMV -DASMINF" OBJA="inffas32.obj match686.obj" zlib.lib_
   * x64: _SetEnv.cmd /x64 /Release_ and _nmake /f win32\Makefile.msc AS=ml64 LOC="-DASMV -DASMINF -I." OBJA="inffasx64.obj gvmat64.obj inffas8664.obj" zlib.lib_
 * If building from SourceCode repository and not from a snapshot targzip:
  * "MinGW/MSYS":http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst/ (install the basic development environment, the last option in the list) for autoconf/automake
  * "pkg.m4":https://gnunet.org/svn/Extractor/m4/pkg.m4 from pkg-config to be placed into _c:\mingw\share\aclocal_. If still encountering problems on ./configure time, also put pkg.m4 to _c:\mingw\share\aclocal-1.11_
 * If building from Github, Git for Windows
  * "http://msysgit.googlecode.com/files/Git-1.7.4-preview20110204.exe":http://msysgit.googlecode.com/files/Git-1.7.4-preview20110204.exe (add Git (only git) to PATH)
 * Check out the build snippets on "NightlyBuilds":wiki/Automated-OpenSC-builds

h2. Build instructions (Linux)

The following has been done on Ubuntu 10.10, x86_64
 * Building the .exe installer requires Mingw32 (mingw32-runtime >= 3.15.2) and Wine (for running Inno Setup)
 <pre><code>$ sudo apt-get install wine mingw32 docbook-xsl autoconf automake subversion libtool libpcsclite-dev patch nsis
</code></pre>
 * You'll need Inno Setup, so fetch and install it (with defaults)
<pre><code>$ wget http://www.jrsoftware.org/download.php/is.exe
$ wine is.exe
</code></pre>
 * Check out OpenSC:
<pre><code>$ git clone git://www.opensc-project.org/OpenSC.git
$ cd OpenSC
</code></pre>
 * Prepare the repository checkout:
<pre><code>$ ./bootstrap && ./configure --disable-doc
</code></pre>
 * Build the installer, first building OpenSC:
<pre><code>$ ./win32/installer_from_build.sh
 # build log removed
Successful compile (2.170 sec). Resulting Setup program filename is:
Z:\home\martin\OpenSC\win32\Output\OpenSC-0.12.0.exe

real	5m53.208s
user	5m4.780s
sys	1m21.990s

</code></pre>
 * Use the installer .exe from win32/Output/OpenSC-0.12.0.exe
